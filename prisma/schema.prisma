generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Movie {
  id              Int                @id
  title           String
  posterUrl       String?            @db.Text
  backdropUrl     String?            @db.Text
  synopsis        String?            @db.Text
  releaseDate     DateTime?          @db.Date
  adult           Boolean?           @default(false)
  popularity      Float?
  voteCount       Int?
  voteAverage     Float?
  genres          MovieGenre[]
  UserMovieRating UserMovieRating[]
  UserMoviePairs1 TournamentRating[] @relation("movie1")
  UserMoviePairs2 TournamentRating[] @relation("movie2")

  @@index([title])
}

model Genre {
  id    Int          @id
  name  String
  Movie MovieGenre[]
}

model MovieGenre {
  id      Int   @id @default(autoincrement())
  movieId Int
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@index([genreId])
  @@index([movieId])
}

model User {
  id              Int                @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String             @unique
  hash            String
  admin           Boolean            @default(false)
  UserMovieRating UserMovieRating[]
  UserMoviePairs  TournamentRating[]
}

model UserMovieRating {
  id                Int     @id @default(autoincrement())
  userId            Int
  movieId           Int
  interactionStatus String?
  movie             Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([userId])
}

model TournamentRating {
  id                Int     @id @default(autoincrement())
  userId            Int
  movie1Id          Int
  movie2Id          Int
  winnerId          Int // The movieId of the movie the user preferred
  interactionStatus String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie1            Movie   @relation(fields: [movie1Id], references: [id], name: "movie1", onDelete: Cascade)
  movie2            Movie   @relation(fields: [movie2Id], references: [id], name: "movie2", onDelete: Cascade)

  @@unique([userId, movie1Id, movie2Id])
  @@index([userId])
  @@index([movie2Id])
  @@index([movie1Id])
}
