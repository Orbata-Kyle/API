generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Movie {
  id                      Int                   @id
  title                   String
  posterUrl               String?               @db.Text
  backdropUrl             String?               @db.Text
  synopsis                String?               @db.Text
  releaseDate             DateTime?             @db.Date
  adult                   Boolean?              @default(false)
  popularity              Float?
  voteCount               Int?
  voteAverage             Float?
  genres                  MovieGenre[]
  UserMovieRating         UserMovieRating[]
  UserMoviePairs1         TournamentRating[]    @relation("movie1")
  UserMoviePairs2         TournamentRating[]    @relation("movie2")
  details                 MovieDetails[]
  spokenLanguages         MovieSpokenLanguage[]
  cast                    Cast[]
  crew                    Crew[]
  keywords                MovieKeyword[]
  videos                  Video[]
  MovieRecommedations     MovieRecommedation[]  @relation("movie")
  RecommendationForMovies MovieRecommedation[]  @relation("recommendationMovie")

  updatedAt               DateTime              @updatedAt
  createdAt               DateTime              @default(now())

  @@index([title])
}

model Video {
  id        Int       @id @default(autoincrement())
  name      String?
  site      String?
  size      Int?
  type      String?
  key       String?
  official  Boolean?
  published DateTime?
  iso31661  String?
  iso6391   String?
  movieId   Int
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
}

model MovieKeyword {
  id        Int     @id @default(autoincrement())
  movieId   Int
  keywordId Int
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([movieId, keywordId])
  @@index([movieId])
  @@index([keywordId])
}

model Keyword {
  id           Int            @id
  name         String
  movieKeyword MovieKeyword[]
}

model Cast {
  id                 Int      @id
  name               String
  originalName       String?
  character          String?
  profileUrl         String?
  popularity         Float?
  knownForDepartment String?
  gender             Int?
  order              Int?
  adult              Boolean?
  movieId            Int
  movie              Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
}

model Crew {
  id                 Int      @id
  name               String
  originalName       String?
  department         String?
  job                String?
  profileUrl         String?
  adult              Boolean?
  knownForDepartment String?
  popularity         Float?
  movieId            Int
  movie              Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
}

model Genre {
  id    Int          @id
  name  String
  Movie MovieGenre[]
}

model MovieGenre {
  id      Int   @id @default(autoincrement())
  movieId Int
  genreId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([movieId, genreId])
  @@index([genreId])
  @@index([movieId])
}

model MovieDetails {
  id      Int     @id @default(autoincrement())
  budget  Int?
  revenue Int?
  runtime Int?
  status  String?
  tagline String?
  movieId Int
  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  updatedAt               DateTime              @updatedAt
  createdAt               DateTime              @default(now())

  @@unique([movieId])
}

model MovieSpokenLanguage {
  id                Int      @id @default(autoincrement())
  movieId           Int
  spokenLanguageIso String
  movie             Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  spokenLanguage    Language @relation(fields: [spokenLanguageIso], references: [iso6391], onDelete: Cascade)

  @@unique([movieId, spokenLanguageIso])
  @@index([movieId])
  @@index([spokenLanguageIso])
}

model Language {
  iso6391             String                @id
  englishName         String?
  name                String?
  movieSpokenLanguage MovieSpokenLanguage[]
}

model MovieRecommedation {
  id                    Int   @id @default(autoincrement())
  movieId               Int
  recommendationMovieId Int
  movie                 Movie @relation(fields: [movieId], references: [id], name: "movie", onDelete: Cascade)
  recommendationMovie   Movie @relation(fields: [recommendationMovieId], references: [id], name: "recommendationMovie", onDelete: Cascade)

  @@unique([movieId, recommendationMovieId])
  @@index([movieId])
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String               @unique
  birthDate          DateTime?
  phoneNumber        String?
  gender             String?
  country            String?
  hash               String
  admin              Boolean              @default(false)
  UserMovieRating    UserMovieRating[]
  UserMoviePairs     TournamentRating[]
  InvalidUserSession InvalidUserSession[]

  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
}

model UserMovieRating {
  id                Int     @id @default(autoincrement())
  userId            Int
  movieId           Int
  interactionStatus String?
  movie             Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt               DateTime              @updatedAt
  createdAt               DateTime              @default(now())

  @@unique([userId, movieId])
  @@index([movieId])
  @@index([userId])
}

model TournamentRating {
  id                Int     @id @default(autoincrement())
  userId            Int
  movie1Id          Int
  movie2Id          Int
  winnerId          Int
  interactionStatus String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie1            Movie   @relation(fields: [movie1Id], references: [id], name: "movie1", onDelete: Cascade)
  movie2            Movie   @relation(fields: [movie2Id], references: [id], name: "movie2", onDelete: Cascade)

  updatedAt               DateTime              @updatedAt
  createdAt               DateTime              @default(now())

  @@unique([userId, movie1Id, movie2Id])
  @@index([userId])
  @@index([movie2Id])
  @@index([movie1Id])
}

model InvalidUserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}
